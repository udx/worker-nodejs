---
name: Build and Test Docker Image

on:
  push:
    branches-ignore:
      - latest

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Development Pipeline
        run: make dev-pipeline

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sudo sh -s -- -b /usr/local/bin

      - name: Trivy Scanning
        run: |
          export TRIVY_DISABLE_VEX_NOTICE=true

          # Disable exit on error for the retry logic
          set +e

          # Retry logic for Trivy
          max_retries=5
          attempt=1
          success=false

          while [ $attempt -le $max_retries ]; do
            echo "Running Trivy scan, attempt $attempt..."

            # Run the Trivy scan and capture the exit status
            trivy image --severity CRITICAL --exit-code 1 --quiet udx-worker-nodejs:latest \
              | tee trivy.log | grep -v 'INFO'
            scan_exit_code=$?

            # Check for CRITICAL vulnerabilities
            if grep -E "Total: [1-9]" trivy.log; then
              echo "CRITICAL vulnerabilities detected!"
              exit 1
            fi

            # Check if Trivy exited successfully
            if [ $scan_exit_code -eq 0 ]; then
              echo "No CRITICAL vulnerabilities found."
              success=true
              break
            else
              echo "Trivy scan failed, retrying in 2 minutes..."
              sleep 120
              attempt=$((attempt+1))
            fi
          done

          # If all retries fail, exit with an error
          if [ "$success" = false ]; then
            echo "Failed to complete Trivy scan after $max_retries attempts."
            exit 1
          fi

      - name: Trivy SBOM Generation
        run: |
          # Suppress verbose notices and informational messages
          export TRIVY_DISABLE_VEX_NOTICE=true
          trivy image --format spdx-json --output sbom.json udx-worker-nodejs:latest 2>/dev/null

          echo "SBOM Top Packages Summary:"
          echo "| Package Name      | Version   |"
          echo "|-------------------|-----------|"

          # Use jq to extract name and versionInfo, excluding packages with null versions, and pipe to column for formatting
          jq -r '.packages[] | select(.versionInfo != null) | "\(.name) | \(.versionInfo)"' sbom.json | sort | uniq | head -n 20 | column -t -s '|'

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json